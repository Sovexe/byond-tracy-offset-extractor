name: Fetch BYOND Builds

on:
  schedule:
    # run every hour
    - cron: "0 */1 * * *"
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  Fetch BYOND Builds:
    runs-on: ubuntu-latest
    env:
      PAGES_BASE: https://sovexe.github.io/byond-tracy-offset-extractor
      BUILDS_BASE: https://spacestation13.github.io/byond-builds
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare tools
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Get our current index.json (may be empty on first run)
        id: ours
        run: |
          set -euo pipefail
          curl -fsS "$PAGES_BASE/index.json" -o ours.json || echo '{}' > ours.json
          echo "Fetched our index.json:"
          cat ours.json
          {
            echo 'ours<<EOF'
            jq -c '.' ours.json
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Get upstream latest version + derive majors
        id: upstream
        env:
          MIN_MAJOR: "515" # lower bound of what we support
        run: |
          set -euo pipefail

          # latest version known upstream
          UPSTREAM_VER="$(curl -fsS "$BUILDS_BASE/version.txt" | tr -d '\r\n')"
          LATEST_MAJOR="${UPSTREAM_VER%%.*}"

          
          LO="$MIN_MAJOR"
          HI="$LATEST_MAJOR"

          if ! [[ "$LO" =~ ^[0-9]+$ && "$HI" =~ ^[0-9]+$ ]]; then
            echo "Bad majors: LO=$LO HI=$HI"; exit 1
          fi
          if [ "$HI" -lt "$LO" ]; then
            echo "Upstream latest major ($HI) is below MIN_MAJOR ($LO) - adjusting to LO"
            HI="$LO"
          fi

          # Build contiguous set of majors [LO..HI], inclusive
          seq "$LO" "$HI" > majors.txt
          echo "Upstream latest version: $UPSTREAM_VER"
          echo "Majors to probe: $(tr '\n' ' ' < majors.txt)"

          {
            echo "upstream_version<<EOF"
            echo "$UPSTREAM_VER"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Crawl all available builds per major
        id: crawl
        run: |
          set -euo pipefail
          : > all_upstream_sorted.txt

          have_any_zip() {
            local major="$1" ver="$2"
            local win="$BUILDS_BASE/${major}/${ver}_byond.zip"
            local lin="$BUILDS_BASE/${major}/${ver}_byond_linux.zip"
            curl -fsI "$win" >/dev/null 2>&1 && return 0
            curl -fsI "$lin" >/dev/null 2>&1 && return 0
            return 1
          }

          while read -r MAJOR; do
            HTML="$(curl -fsS "$BUILDS_BASE/$MAJOR/" || true)"
            if [ -z "$HTML" ]; then
              echo "Skip MAJOR $MAJOR (no index)"
              continue
            fi
            printf '%s\n' "$HTML" \
              | grep -oE "$MAJOR\.[0-9]{4}" \
              | sort -u \
              | while read -r VER; do
                  if have_any_zip "$MAJOR" "$VER"; then
                    echo "$VER"
                  else
                    echo "Skip $VER (no linux/windows zip)" >&2
                  fi
                done
          done < majors.txt | sort -u > all_upstream_sorted.txt

          echo "Found upstream versions:"
          cat all_upstream_sorted.txt || true

          LIST_JSON="$(jq -R -s -c 'split("\n")[:-1]' all_upstream_sorted.txt)"
          {
            echo 'list<<EOF'
            echo "$LIST_JSON"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Compute missing versions (upstream minus ours)
        id: diff
        run: |
          set -euo pipefail
          # ours.json: .versions (may be empty on first run)
          jq -r '.versions // [] | .[]' ours.json 2>/dev/null | sort -u > ours_versions.txt || true
          # upstream list from previous step
          jq -r '.[]' <<< '${{ steps.crawl.outputs.list }}' | sort -u > upstream_versions.txt

          comm -13 ours_versions.txt upstream_versions.txt > missing.txt || true
          echo "Missing versions:"
          cat missing.txt || true

          if [ -s missing.txt ]; then
            MISSING_JSON="$(jq -R -s -c 'split("\n")[:-1]' missing.txt)"
          else
            MISSING_JSON='[]'
          fi
          {
            echo 'json<<EOF'
            echo "$MISSING_JSON"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Bail out if nothing new
        if: ${{ steps.diff.outputs.json == '[]' }}
        run: echo "No new versions to process. Done."

      - name: Kick "Extract Signatures" for batches of ~15 versions
        if: ${{ steps.diff.outputs.json != '[]' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          jq -r '.[]' <<< '${{ steps.diff.outputs.json }}' > to_run.txt

          BATCH_SIZE=15
          mapfile -t VERS < to_run.txt
          TOTAL=${#VERS[@]}
          i=0

          while [ $i -lt $TOTAL ]; do
            CHUNK=( "${VERS[@]:$i:$BATCH_SIZE}" )
            i=$(( i + BATCH_SIZE ))
            PAYLOAD="$(printf '%s\n' "${CHUNK[@]}" | jq -R -s -c 'split("\n")[:-1]')"

            echo "Dispatching Extract Signatures for: $PAYLOAD"
            gh workflow run "Extract Signatures" -f versions="$PAYLOAD"

            # Small delay to avoid spamming
            sleep 2
          done
