name: Extract Signatures

on:
  workflow_dispatch:
    inputs:
      versions:
        description: 'List of BYOND versions to process (e.g. ["515.1646","516.1666"])'
        required: true
        type: string
  workflow_call:
    inputs:
      versions:
        description: 'List of BYOND versions to process'
        required: true
        type: string

jobs:
  extract:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        byond_version: ${{ fromJson(inputs.versions) }}
        os: [windows, linux]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install lief
          pip install capstone

      - name: Set BYOND version
        run: |
          BYOND_VERSION="${{ matrix.byond_version }}"
          # Remove the leading 'v' from the version if present
          BYOND_VERSION="${BYOND_VERSION#v}"
          echo "BYOND_VERSION=$BYOND_VERSION" >> "$GITHUB_ENV"

      - name: Download BYOND
        run: |
          set -euo pipefail
          MAJOR_VERSION=$(echo "$BYOND_VERSION" | cut -d'.' -f1)
          if [ "${{ matrix.os }}" = "windows" ]; then
            DOWNLOAD_URL="https://spacestation13.github.io/byond-builds/${MAJOR_VERSION}/${BYOND_VERSION}_byond.zip"
          else
            DOWNLOAD_URL="https://spacestation13.github.io/byond-builds/${MAJOR_VERSION}/${BYOND_VERSION}_byond_linux.zip"
          fi
          wget "$DOWNLOAD_URL" -O byond.zip
          unzip byond.zip

      - name: Determine target file
        id: determine_target
        run: |
          if [ "${{ matrix.os }}" = "windows" ]; then
            echo "target_file=byond/bin/byondcore.dll" >> "$GITHUB_OUTPUT"
          else
            echo "target_file=byond/bin/libbyond.so" >> "$GITHUB_OUTPUT"
          fi

      - name: Determine if old ELF format is needed
        id: determine_elf
        run: |
          MINOR_VERSION=$(echo "$BYOND_VERSION" | cut -d'.' -f2)
          if [ "${{ matrix.os }}" = "linux" ] && [ "$MINOR_VERSION" -lt 1644 ]; then
            echo "use_old_elf=true" >> "$GITHUB_OUTPUT"
          else
            echo "use_old_elf=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Run extraction script
        run: |
          set -euo pipefail
          if [ "${{ steps.determine_elf.outputs.use_old_elf }}" = "true" ]; then
            python byond_tracy_offset_extractor.py "${{ steps.determine_target.outputs.target_file }}" --use-old-elf | tee extractor.log
          else
            python byond_tracy_offset_extractor.py "${{ steps.determine_target.outputs.target_file }}" | tee extractor.log
          fi

      - name: Parse curly-brace signatures to JSON
        run: |
          set -euo pipefail

          # Find the formatted addresses line (exactly 11 0xXXXXXXXX entries)
          SIG_LINE=$(grep -m1 -E '^\{0x[0-9A-Fa-f]{8}(, 0x[0-9A-Fa-f]{8}){10}\}$' extractor.log || true)

          # Experimental Addresses (first curly-line after the header)
          EXP_LINE=$(awk '/^Experimental Addresses:/{f=1;next} f && /^\{0x/{print;f=0}' extractor.log | head -n1)

          if [ -z "$SIG_LINE" ]; then
            echo "No address line found in extractor.log"
            ADDR_JSON='[]'
          else
            ADDR_JSON=$(echo "$SIG_LINE" \
              | sed -e 's/^{/["/' -e 's/}$/"]/ ' -e 's/, /", "/g')
          fi

          if [ -n "$EXP_LINE" ]; then
            EXP_JSON=$(echo "$EXP_LINE" \
              | sed -e 's/^{/["/' -e 's/}$/"]/ ' -e 's/, /", "/g')
          else
            EXP_JSON=null
          fi

          mkdir -p fragments
          jq -n \
            --arg version "$BYOND_VERSION" \
            --arg platform "${{ matrix.os }}" \
            --arg build_at "$(date -u +%FT%TZ)" \
            --argjson addresses "$ADDR_JSON" \
            --argjson experimental "$EXP_JSON" \
            '{schema:1, version:$version, platform:$platform, addresses:$addresses, experimental:$experimental, build_at:$build_at}' \
            > "fragments/${{ matrix.os }}-${BYOND_VERSION}.json"

          echo "Wrote fragments/${{ matrix.os }}-${BYOND_VERSION}.json"
          ls -l fragments

      - name: Upload page fragment
        uses: actions/upload-artifact@v4
        with:
          name: site-fragments-${{ matrix.os }}-${{ env.BYOND_VERSION }}
          path: fragments/*.json
          if-no-files-found: ignore
          # retention-days: 7   # optional: tune if needed
